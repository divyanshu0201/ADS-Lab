#include<bits/stdc++.h> 
using namespace std; 

struct Node {
	int data, degree; 
	Node *child, *sibling, *parent; 
}; 

Node* newNode(int key){
	Node *temp = new Node; 
	temp->data = key; 
	temp->degree = 0; 
	temp->child = temp->parent = temp->sibling = NULL; 
	return temp; 
} 


Node* mergeTrees(Node *b1, Node *b2){
	if (b1->data > b2->data) swap(b1, b2); 
	b2->parent = b1; 
	b2->sibling = b1->child; 
	b1->child = b2; 
	b1->degree++; 
	return b1; 
} 



list<Node*> uniteBH(list<Node*> l1, list<Node*> l2) {
	list<Node*> _new; 
	list<Node*>::iterator it = l1.begin(); 
	list<Node*>::iterator ot = l2.begin(); 
	while (it!=l1.end() && ot!=l2.end()){
		if((*it)->degree <= (*ot)->degree){
			_new.push_back(*it); 
			it++; 
		} 
		else{
			_new.push_back(*ot); 
			ot++; 
		} 
	} 
	while (it != l1.end()){
		_new.push_back(*it); 
		it++; 
	} 
	while (ot!=l2.end()){
		_new.push_back(*ot); 
		ot++; 
	} 
	return _new; 
} 

list<Node*> adjust(list<Node*> _heap){
	if (_heap.size() <= 1) return _heap; 
	list<Node*> new_heap; 
	list<Node*>::iterator it1,it2,it3; 
	it1 = it2 = it3 = _heap.begin(); 

	if (_heap.size() == 2){
		it2 = it1; 
		it2++; 
		it3 = _heap.end(); 
	} 
	else{
		it2++; 
		it3=it2; 
		it3++; 
	} 
	while (it1 != _heap.end()){
		
		if (it2 == _heap.end()) it1++; 
		else if ((*it1)->degree < (*it2)->degree){
			it1++; 
			it2++; 
			if(it3!=_heap.end()) it3++; 
		} 
		else if (it3!=_heap.end() && (*it1)->degree == (*it2)->degree && (*it1)->degree == (*it3)->degree){
			it1++; 
			it2++; 
			it3++; 
		}
		else if ((*it1)->degree == (*it2)->degree){
			Node *temp; 
			*it1 = mergeTrees(*it1,*it2); 
			it2 = _heap.erase(it2); 
			if(it3 != _heap.end()) it3++; 
		} 
	} 
	return _heap; 
} 


list<Node*> insertTreeBH(list<Node*> _heap, Node *tree) {
	list<Node*> temp; 
	temp.push_back(tree); 
	temp = uniteBH(_heap,temp); 
	return adjust(temp); 
} 

list<Node*> removeMinBH(Node *tree){
	list<Node*> heap; 
	Node *temp = tree->child; 
	Node *lo; 
	while (temp){
		lo = temp; 
		temp = temp->sibling; 
		lo->sibling = NULL; 
		heap.push_front(lo); 
	} 
	return heap; 
} 

list<Node*> insert(list<Node*> _head, int key){
	Node *temp = newNode(key); 
	return insertTreeBH(_head,temp); 
} 



Node* getMin(list<Node*> _heap){
	list<Node*>::iterator it = _heap.begin(); 
	Node *temp = *it; 
	while (it != _heap.end()){
		if ((*it)->data < temp->data) 
			temp = *it; 
		it++; 
	} 
	return temp; 
} 

list<Node*> extractMin(list<Node*> _heap){
	list<Node*> new_heap,lo; 
	Node *temp; 
	temp = getMin(_heap); 
	list<Node*>::iterator it; 
	it = _heap.begin(); 
	while (it != _heap.end()){
		if (*it != temp) {
			new_heap.push_back(*it); 
		} 
		it++; 
	} 
	lo = removeMinBH(temp); 
	new_heap = uniteBH(new_heap,lo); 
	new_heap = adjust(new_heap); 
	return new_heap; 
} 


void printTree(Node *h){
	while (h){
		cout << h->data << " "; 
		printTree(h->child); 
		h = h->sibling; 
	} 
} 


void printHeap(list<Node*> _heap){
	list<Node*> ::iterator it; 
	it = _heap.begin(); 
	while (it != _heap.end()){
		printTree(*it); 
		it++; 
	} 
} 



int main() {
	list<Node*> _heap; 

    int x = 0;
    while(x == 0){
        cout << "Enter 1 to insert, 2 to get minimum, 3 to delete minimum, 4 to print the heap, 5 to exit" << endl;
        cin >> x;
        switch (x){
            case 1:
                cout << "Enter the number to be inserted" << endl;
                cin >> x;
                _heap = insert(_heap, x);
                break;
            case 2:
                cout << "Minimum is : " << getMin(_heap)->data << endl;
                break;
            case 3:
                _heap = extractMin(_heap); 
                break;
            case 4:
                cout << "Heap: ";
                printHeap(_heap);
                cout << endl;
                break;
            case 5:
                exit(0);
                break;
            default:
                cout << "Not a valid input" << endl;
                break;
        }
        x = 0;
    }
	return 0; 
} 
